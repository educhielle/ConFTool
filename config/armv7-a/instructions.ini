// *** ARITHMETIC ***
[GROUP]
{INSTRUCTIONS}
movw
{FORMAT}
	ins	rd, #imm
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
movt
{FORMAT}
	ins	rd, #imm
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
movw
{FORMAT}
	ins	rd, imm
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
movt
{FORMAT}
	ins	rd, imm
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
add, sub
{FORMAT}
	ins	rd, rs, rs, lsl #imm
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
mla, smull
{FORMAT}
	ins	rd, rs, rs, rs
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
add, mul, lsl, rsb
{FORMAT}
	ins	rd, rs, rs
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
mov
{FORMAT}
	ins	rd, rs
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
add, and, eor, lsl, lsr, sub, bic, asr
{FORMAT}
	ins	rd, rs, #imm
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
mov
{FORMAT}
	ins	rd, #imm
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
mov
{FORMAT}
	ins	rd, rs, asl #imm
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
nop
{FORMAT}
	ins
{TYPE}
arithmetic

// *** LOAD ***
[GROUP]
{INSTRUCTIONS}
ldr
{FORMAT}
	ins	rd, [rs, rs]
{TYPE}
load

[GROUP]
{INSTRUCTIONS}
ldrsb, ldrb, ldr
{FORMAT}
	ins	rd, [rs, #offset]
{TYPE}
load

[GROUP]
{INSTRUCTIONS}
ldr
{FORMAT}
	ldr	rd, [rs], #offset
{TYPE}
load

[GROUP]
{INSTRUCTIONS}
ldr
{FORMAT}
	ldr	rd, [rs]
{TYPE}
load

[GROUP]
{INSTRUCTIONS}
ldmia
{FORMAT}
	ins	rs!, {rd, rd, rd, rd}
{TYPE}
load

// *** STORE ***
[GROUP]
{INSTRUCTIONS}
str
{FORMAT}
	ins	rs, [rs, rs]
{TYPE}
store

[GROUP]
{INSTRUCTIONS}
str, strb
{FORMAT}
	ins	rs, [rs, #offset]
{TYPE}
store

[GROUP]
{INSTRUCTIONS}
str
{FORMAT}
	ins	rs, [rs, #offset]!
{TYPE}
store

[GROUP]
{INSTRUCTIONS}
str
{FORMAT}
	ins	rs, [rs]
{TYPE}
store

[GROUP]
{INSTRUCTIONS}
str
{FORMAT}
	ins	rs, [rs, rs, lsl #imm]
{TYPE}
store

[GROUP]
{INSTRUCTIONS}
stmia
{FORMAT}
	ins	rs!, {rs, rs, rs, rs}
{TYPE}
store

// *** BRANCH TO TARGET (LABEL) ***
[GROUP]
{INSTRUCTIONS}
bne, beq, bge, ble, bgt, blt
{FORMAT}
	ins	target
{TYPE}
branch_to_target

// *** JUMP TO TARGET (LABEL) ***
[GROUP]
{INSTRUCTIONS}
b
{FORMAT}
	ins	target
{TYPE}
jump_to_target

[GROUP]
{INSTRUCTIONS}
bl
{FORMAT}
	ins	target
{HIDDEN_REGISTERS}
rd: lr
{TYPE}
jump_to_target

// *** JUMP TO REGISTER ***
[GROUP]
{INSTRUCTIONS}
bx
{FORMAT}
	ins	rs
{TYPE}
jump_to_register

// *** OTHER ***
[GROUP]
{INSTRUCTIONS}
cmp
{FORMAT}
	ins	rs, rs
{TYPE}
other

[GROUP]
{INSTRUCTIONS}
cmp
{FORMAT}
	ins	rs, #imm
{TYPE}
other

// *** LOAD FROM STACK ***
[GROUP]
{INSTRUCTIONS}
ldmfd
{FORMAT}
	ins	rs!, {rd, rd, rd}
{HIDDEN_REGISTERS}
rd: sp
{TYPE}
load_from_stack

[GROUP]
{INSTRUCTIONS}
ldmfd
{FORMAT}
	ins	rs!, {rd, rd}
{HIDDEN_REGISTERS}
rd: sp
{TYPE}
load_from_stack

[GROUP]
{INSTRUCTIONS}
ldmfd
{FORMAT}
	ins	rs!, {rd}
{HIDDEN_REGISTERS}
rd: sp
{TYPE}
load_from_stack

[GROUP]
{INSTRUCTIONS}
pop
	ins	{rd, rd, rd}
{HIDDEN_REGISTERS}
rd: sp
{TYPE}
load_from_stack

[GROUP]
{INSTRUCTIONS}
pop
	ins	{rd, rd}
{HIDDEN_REGISTERS}
rd: sp
{TYPE}
load_from_stack

[GROUP]
{INSTRUCTIONS}
pop
	ins	{rd}
{HIDDEN_REGISTERS}
rd: sp
{TYPE}
load_from_stack

// *** STORE TO STACK ***
[GROUP]
{INSTRUCTIONS}
stmfd
{FORMAT}
	ins	rs!, {rs, rs, rs}
{HIDDEN_REGISTERS}
rd: sp
{TYPE}
store_to_stack

[GROUP]
{INSTRUCTIONS}
stmfd
{FORMAT}
	ins	rs!, {rs, rs}
{HIDDEN_REGISTERS}
rd: sp
{TYPE}
store_to_stack

[GROUP]
{INSTRUCTIONS}
stmfd
{FORMAT}
	ins	rs!, {rs}
{HIDDEN_REGISTERS}
rd: sp
{TYPE}
store_to_stack

[GROUP]
{INSTRUCTIONS}
push
{FORMAT}
	ins	{rs, rs, rs}
{HIDDEN_REGISTERS}
rd: sp
{TYPE}
store_to_stack

[GROUP]
{INSTRUCTIONS}
push
{FORMAT}
	ins	{rs, rs}
{HIDDEN_REGISTERS}
rd: sp
{TYPE}
store_to_stack

[GROUP]
{INSTRUCTIONS}
push
{FORMAT}
	ins	{rs}
{HIDDEN_REGISTERS}
rd: sp
{TYPE}
store_to_stack
