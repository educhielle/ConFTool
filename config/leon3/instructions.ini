//ARITHMETIC
[GROUP]
{INSTRUCTIONS}
add, addcc, sub, subcc, addx, addxcc, subx, subxcc, and, or, orn, mulscc, andcc, xor
{FORMAT}
	ins	rs, rs, rd
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
add, addcc, sub, subcc, addx, addxcc, subx, subxcc, and, or, orn, sll, srl, andncc
{FORMAT}
	ins	rs, imm, rd
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
mov
{FORMAT}
	ins	rs, rd
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
sethi, mov
{FORMAT}
	ins	imm, rd
{TYPE}
arithmetic

[GROUP]
{INSTRUCTIONS}
inc
{FORMAT}
	ins	rd
{TYPE}
arithmetic

//LOAD
[GROUP]
{INSTRUCTIONS}
ld, ldub
{FORMAT}
	ins	[rs+imm], rd
{TYPE}
load

[GROUP]
{INSTRUCTIONS}
ld, ldub
{FORMAT}
	ins	[rs-imm], rd
{TYPE}
load

[GROUP]
{INSTRUCTIONS}
ldsb, ld, ldub
{FORMAT}
	ins	[rs], rd
{TYPE}
load

//STORE
[GROUP]
{INSTRUCTIONS}
stb, sth, st
{FORMAT}
	ins	rs, [rs]
{TYPE}
store

[GROUP]
{INSTRUCTIONS}
st
{FORMAT}
	ins	rs, [rs+imm]
{TYPE}
store

[GROUP]
{INSTRUCTIONS}
st
{FORMAT}
	ins	rs, [rs-imm]
{TYPE}
store

[GROUP]
{INSTRUCTIONS}
clr
{FORMAT}
	ins	rs
{TYPE}
store

//JUMP TO TARGET
[GROUP]
{INSTRUCTIONS}
b, ba
{FORMAT}
	ins	target
{TYPE}
jump_to_target

[GROUP]
{INSTRUCTIONS}
call
{FORMAT}
	ins	target, imm
{HIDDEN_REGISTERS}
rd: %o7, %fp
{TYPE}
jump_to_target

//JUMP TO REGISTER
[GROUP]
{INSTRUCTIONS}
jmp
{FORMAT}
	ins rs+imm
{TYPE}
jump_to_register

[GROUP]
{INSTRUCTIONS}
ret, retl
{FORMAT}
	ins
{TYPE}
jump_to_register

//BRANCH TO TARGET LABEL
[GROUP]
{INSTRUCTIONS}
bne, be, bg, ble, bge, bl, bgu, bleu
{FORMAT}
	ins	target
{TYPE}
branch_to_target

//OTHER
[GROUP]
{INSTRUCTIONS}
restore
{FORMAT}
	ins
{HIDDEN_REGISTERS}
rd: %o7
{TYPE}
other

[GROUP]
{INSTRUCTIONS}
save
{FORMAT}
	ins	rs, imm, rd
{HIDDEN_REGISTERS}
rd: %fp
{TYPE}
other

[GROUP]
{INSTRUCTIONS}
cmp
{FORMAT}
	ins	rs, rs
{TYPE}
other

[GROUP]
{INSTRUCTIONS}
cmp
{FORMAT}
	ins	rs, imm
{TYPE}
other

[GROUP]
{INSTRUCTIONS}
btst
{FORMAT}
	ins	imm, rs
{TYPE}
arithmetic

//NO_OPERATION
[GROUP]
{INSTRUCTIONS}
nop
{FORMAT}
	 ins
{TYPE}
no_operation
